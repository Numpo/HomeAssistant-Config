esphome:
  name: epaper-esp32
  friendly_name: epaper-esp32
  on_boot:
  - delay: 15s
  - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "XXX"

ota:
  - platform: esphome
    password: "XXX"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Epaper-Esp32 Fallback Hotspot"
    password: "XXX"

captive_portal:
    
script:
  - id: update_screen
    then:
      - component.update: eink_display

time:
  - platform: sntp
    id: sntp_time
    on_time:
      # Cron syntax, trigger every 5 minutes
      - cron: '00 /5 * * * *'
        then:
          - script.execute: update_screen
     
spi:
  clk_pin: 13
  mosi_pin: 14

image:
  - file: "epaper/IDF_RER_A_logo.bmp"
    id: rer_a_logo
  - file: "epaper/IDF_RER_E_logo.bmp"
    id: rer_e_logo

font:
  ######### REGULAR #################
  - file: "epaper/GothamRnd-Book.otf"
    id: book20
    size: 20
    glyphs: &font-glyphs
      ['!', '"', '%', '(', ')', '+', '=', ',', '-', '_', '.', ':', '°', ' ', "'", '|',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'é', 'à', 'è', 'ç', 'ù', 'É', 'À', 'È', 'Ç', 'Ù']
  - file: "epaper/GothamRnd-Book.otf"
    id: book25
    size: 25
    glyphs : *font-glyphs 
  ########## BOLD ################## 
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold15
    size: 15
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold20
    size: 20
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold25
    size: 25
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold30
    size: 30
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold35
    size: 35
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold40
    size: 40
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold55
    size: 55
    glyphs: ['.', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', '-']
  - file: "epaper/GothamRnd-Bold.otf"
    id: bold45
    size: 45
    glyphs: ['.', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', '-']

  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi120
    size: 120
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant

      - "\U000F1904" # mdi-home-lightning-bolt-outline

      - "\U000F156D" # mdi:sofa-outline
      - "\U000F0FD1" # mdi:bed-king-outline

      - "\U000F051F" # mdi:timer-sand

  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi36
    size: 36
    glyphs: *mdi-weather-glyphs
  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi20
    size: 20
    glyphs: *mdi-weather-glyphs

sensor:
  - platform: homeassistant
    entity_id: weather.YOUR_CITY
    attribute: temperature
    id: weather_temperature
  - platform: homeassistant
    entity_id: sensor.echo_salon_temperature
    id: echo_salon_temperature
  - platform: homeassistant
    entity_id: sensor.echo_chambre_temperature
    id: echo_chambre_temperature

text_sensor: 
  - platform: homeassistant
    entity_id: weather.YOUR_CITY
    id: weather_name
  - platform: homeassistant
    entity_id: sensor.rer_a_direction
    id: rer_a_direction
  - platform: homeassistant
    entity_id: sensor.rer_a_next_times
    id: rer_a_next_times
  - platform: homeassistant
    entity_id: sensor.rer_e_direction
    id: rer_e_direction
  - platform: homeassistant
    entity_id: sensor.rer_e_next_times
    id: rer_e_next_times
  - platform: homeassistant
    entity_id: sensor.edf_tempo_today
    id: edf_tempo_today
  - platform: homeassistant
    entity_id: sensor.edf_tempo_tomorrow
    id: edf_tempo_tomorrow

display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: 15
    dc_pin: 27
    busy_pin: 25
    reset_pin: 26
    reset_duration: 2ms
    model: 7.50inv2
    rotation: 270°
    update_interval: never
    lambda: |
     std::map<std::string, std::string> weather_icon_map
        {
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"night", "\U000F0594"},
          {"night-partly-cloudy", "\U000F0F31"},
          {"partlycloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };

     std::map<std::string, std::string> weather_traduction
        {
          {"cloudy", "Nuageux"},
          {"cloudy-alert", "Alerte"},
          {"cloudy-arrow-right", "--"},
          {"fog", "Brouillard"},
          {"hail", "Grêle"},
          {"hazy", "Brume"},
          {"hurricane", "Ouragan"},
          {"lightning", "Orage"},
          {"lightning-rainy", "Orageux"},
          {"night", "Nuit"},
          {"night-partly-cloudy", "Nuageux"},
          {"partlycloudy", "Nuageux"},
          {"partly-lightning", "Orageux"},
          {"partly-rainy", "Pluvieux"},
          {"partly-snowy", "Neigeux"},
          {"partly-snowy-rainy", "Neigeux"},
          {"pouring", "À verse"},
          {"rainy", "Pluvieux"},
          {"snowy", "Neigeux"},
          {"snowy-heavy", "Neigeux"},
          {"snowy-rainy", "Neigeux"},
          {"sunny", "Ensoleillé"},
          {"sunny-alert", "Alerte"},
          {"sunny-off", "--"},
          {"sunset", "Crépuscule"},
          {"sunset-down", "Crépuscule"},
          {"sunset-up", "Aube"},
          {"tornado", "Tornade"},
          {"windy", "Venteux"},
          {"windy-variant", "Venteux"},
        };

     // Get time from SNTP
     auto current_time = id(sntp_time).now();

     // Week day in French
     const char* days_fr[] = {"Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"};
      
     // Month in French
     const char* months_fr[] = {"Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"};

     // Usefull date data
     int day_of_month = current_time.day_of_month;  // Day of the month
     int month = current_time.month;       // Month
     int weekday = current_time.day_of_week - 1;   // Day of the week (1 = Dimanche, 2 = Lundi, ..., 7 = Samedi)


     // Format date
     String formatted_date = String(days_fr[weekday]) + " " + String(day_of_month) + " " + months_fr[month - 1];

     // Print date
     it.printf(240, 75, id(bold35), TextAlign::TOP_CENTER, "%s", formatted_date.c_str());


     it.filled_rectangle(50, 120, 380, 2);


     it.printf(105, 135, id(mdi120), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_name).state].c_str());
     it.printf(180, 145, id(bold35), TextAlign::TOP_LEFT, "%s", weather_traduction[id(weather_name).state].c_str());
     it.printf(180, 187, id(bold55), TextAlign::TOP_LEFT, "%2.1f°C", id(weather_temperature).state);

     it.filled_rectangle(50, 280, 380, 2);

     it.printf(150, 290, id(bold20), TextAlign::TOP_CENTER, "Salon");
     it.print(150, 310, id(mdi36), TextAlign::TOP_CENTER, "\U000F156D");
     it.printf(60, 360, id(bold45), TextAlign::TOP_LEFT, "%2.1f°C", id(echo_salon_temperature).state);

     it.filled_rectangle(235, 320, 2, 60);

     it.printf(330, 290, id(bold20), TextAlign::TOP_CENTER, "Chambre");
     it.print(330, 310, id(mdi36), TextAlign::TOP_CENTER, "\U000F0FD1");
     it.printf(260, 360, id(bold45), TextAlign::TOP_LEFT, "%2.1f°C", id(echo_chambre_temperature).state);

     it.filled_rectangle(50, 420, 380, 2);

     // Translate EDF Tempo color days
     auto get_tempo_text = [](int tempo_state) -> std::string {
       if (tempo_state == 1) return "Jour Bleu";
       if (tempo_state == 2) return "Jour Blanc";
       if (tempo_state == 3) return "Jour Rouge";
       return "Inconnu";
     };

     int today_state = atoi(id(edf_tempo_today).state.c_str());
     int tomorrow_state = atoi(id(edf_tempo_tomorrow).state.c_str());

     // Get states
     std::string today_text = get_tempo_text(today_state);
     std::string tomorrow_text = get_tempo_text(tomorrow_state);

     // Print 2 columns
     it.printf(235, 430, id(bold25), TextAlign::TOP_CENTER, "EDF Tempo");
     // Column 1: Today
     it.printf(140, 460, id(bold20), TextAlign::TOP_CENTER, "Aujourd'hui");
     it.printf(140, 480, id(mdi36), TextAlign::TOP_CENTER, "\U000F1904");
     it.printf(140, 520, id(bold20), TextAlign::TOP_CENTER, "%s", today_text.c_str());

     it.filled_rectangle(235, 480, 2, 40);

     // Column 2: Tomorrow
     it.printf(330, 460, id(bold20), TextAlign::TOP_CENTER, "Demain");
     it.printf(330, 480, id(mdi36), TextAlign::TOP_CENTER, "\U000F051F");
     it.printf(330, 520, id(bold20), TextAlign::TOP_CENTER, "%s", tomorrow_text.c_str());

     it.filled_rectangle(50, 560, 380, 2);

     it.image(50, 590, id(rer_a_logo));
     it.filled_rectangle(140, 585, 2, 40);
     it.printf(150, 580, id(bold20), TextAlign::TOP_LEFT, "%s", id(rer_a_direction).state.c_str());
     it.printf(150, 610, id(bold20), TextAlign::TOP_LEFT, "%s", id(rer_a_next_times).state.c_str());

     it.image(50, 660, id(rer_e_logo));
     it.filled_rectangle(140, 655, 2, 40);
     it.printf(150, 650, id(bold20), TextAlign::TOP_LEFT, "%s", 
      ([](std::string str) {
          str.erase(std::remove(str.begin(), str.end(), '('), str.end());
          str.erase(std::remove(str.begin(), str.end(), ')'), str.end());
          return str.c_str();
      })(id(rer_e_direction).state));


     it.printf(150, 680, id(bold20), TextAlign::TOP_LEFT, "%s", id(rer_e_next_times).state.c_str());

     it.filled_rectangle(50, 720, 380, 2);


     it.printf(250, 725, id(bold15), TextAlign::TOP_RIGHT, "Infos mises à jour : ");
     it.strftime(255, 725, id(bold15), TextAlign::TOP_LEFT, "%d-%m-%Y %H:%M", id(sntp_time).now());
     

